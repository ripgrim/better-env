{"version":3,"sources":["../src/commands/example.ts","../src/utils/logger.ts","../src/index.ts","../package.json"],"sourcesContent":["import chalk from \"chalk\";\nimport { Command } from \"commander\";\nimport ora from \"ora\";\n\nimport { logger } from \"../utils/logger\";\n\nconst spinner = ora({\n  text: \"Loading...\",\n  color: \"yellow\",\n});\n\nexport const example = new Command()\n  .name(\"example\")\n  .description(\"An example command\")\n  .arguments(\"[name]\")\n  .action(async (name) => {\n    await runExample(name);\n  });\n\nexport const pull = new Command()\n  .name(\"pull\")\n  .description(\"Pull environment variables from a project\")\n  .arguments(\"[projectId]\")\n  .action(async (projectId) => {\n    await runPull(projectId);\n  });\n\nexport const push = new Command()\n  .name(\"push\")\n  .description(\"Push environment variables to a project\")\n  .arguments(\"[projectId]\")\n  .action(async (projectId) => {\n    await runPush(projectId);\n  });\n\nexport async function runPull(projectId: string) {\n  logger.info(`Executing ${chalk.bold(\"pull\")} command`);\n  spinner.start();\n  await new Promise((res) => setTimeout(res, 2000));\n  spinner.succeed(`Pulled environment variables from ${projectId}`);\n}\n\nexport async function runPush(projectId: string) {\n  logger.info(`Executing ${chalk.bold(\"push\")} command`);\n  spinner.start();\n  await new Promise((res) => setTimeout(res, 2000));\n  spinner.succeed(`Pushed environment variables to ${projectId}`);\n}\n\nexport async function runExample(name = \"world\") {\n  logger.info(`Executing ${chalk.bold(\"example\")} command`);\n  spinner.start();\n  await new Promise((res) => setTimeout(res, 2000));\n  spinner.succeed(`Hello, ${name}`);\n\n  return `Hello, ${name}`;\n}\n","import chalk from \"chalk\";\n\n/**\n * Custom logger\n */\nexport const logger = {\n  log: (msg: string) => console.log(msg),\n  info: (msg: string) => console.log(chalk.blue(msg)),\n  success: (msg: string) => console.log(chalk.green(msg)),\n  warn: (msg: string) => console.log(chalk.yellow(msg)),\n  error: (msg: string) => console.log(chalk.red(msg)),\n} as const;\n","import { example, pull, push } from \"@/src/commands/example\";\nimport { Command } from \"commander\";\nimport chalk from \"chalk\";\nimport { version } from \"../package.json\";\n\nconst commands = [example, pull, push];\n\n// Your custom ASCII banner\nconst banner = `\n\n${chalk.red(`░██                   ░██      ░██`)}\n${chalk.red(`░██                   ░██      ░██`)}\n${chalk.red(`░████████  ░███████░████████░████████░███████ ░██░████              ░███████ ░████████ ░██    ░██ `)}\n${chalk.white(`░██    ░██░██    ░██  ░██      ░██  ░██    ░██░███      ░███████   ░██    ░██░██    ░██ ░██  ░██         `)}\n${chalk.white(`░██    ░██░█████████  ░██      ░██  ░█████████░██                  ░█████████░██    ░██ ░██  ░██  `)}\n${chalk.blue(`░███   ░██░██         ░██      ░██  ░██       ░██                  ░██       ░██    ░██  ░██░██   `)}\n${chalk.blue(`░██░█████  ░███████    ░████    ░████░███████ ░██                   ░███████ ░██    ░██   ░███     `)}\n`;\n\n\n//todo:\n// red banner if error\n// yellow banner if warning\n// rainbow animated banner if normal \n\nfunction main() {\n  // Only print banner if help is NOT requested\n  const isHelp =\n    process.argv.includes(\"-h\") ||\n    process.argv.includes(\"--help\") ||\n    process.argv.includes(\"--version\") ||\n    process.argv.includes(\"help\");\n  if (!isHelp) {\n    console.log(chalk.red(banner));\n  }\n\n  const program = new Command()\n    .name(\"better-env\")\n    // .description(\"Better Env CLI\")\n    .usage(\"[command] [options]\")\n    .version(version || \"0.0.0\")\n    .helpOption(\"-h, --help\", \"display help\")\n    .showHelpAfterError()\n    .addHelpText(\"before\", \"\\nhey haha\\n\")\n    .addHelpText(\n      \"after\",\n      \"\\nUse `better-env help [command]` for more details.\\n\"\n    );\n\n  commands.forEach((command) => {\n    program.addCommand(command);\n  });\n\n  program.parse();\n}\n\nmain();\n","{\n  \"name\": \"better-env\",\n  \"version\": \"0.0.6\",\n  \"description\": \"CLI for better-env\",\n  \"license\": \"MIT\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"type\": \"module\",\n  \"main\": \"dist/index.js\",\n  \"bin\": {\n    \"better-env\": \"dist/index.js\",\n    \"be\": \"dist/index.js\"\n  },\n  \"types\": \"dist/index.d.ts\",\n  \"exports\": \"./dist/index.js\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"dev\": \"tsup --watch\",\n    \"build\": \"tsup\",\n    \"start\": \"node dist/index.js\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"test\": \"vitest\",\n    \"lint\": \"eslint --ext .ts\",\n    \"format:write\": \"prettier --write .\",\n    \"format:check\": \"prettier --check .\",\n    \"prepublishOnly\": \"npm run build\",\n    \"release\": \"changeset version\",\n    \"pub:release\": \"bun run build && bun publish --no-git-checks --access public\",\n    \"pub:beta\": \"bun run build && bun publish --no-git-checks --access public --tag beta\"\n  },\n  \"devDependencies\": {\n    \"@types/fs-extra\": \"^11.0.4\",\n    \"@types/node\": \"^20.10.6\",\n    \"tsup\": \"^8.0.1\",\n    \"type-fest\": \"^4.10.1\",\n    \"typescript\": \"^5.3.3\",\n    \"vitest\": \"^1.2.1\"\n  },\n  \"dependencies\": {\n    \"chalk\": \"^5.3.0\",\n    \"commander\": \"^11.1.0\",\n    \"fs-extra\": \"^11.2.0\",\n    \"ora\": \"^8.0.1\",\n    \"prompts\": \"^2.4.2\"\n  }\n}\n"],"mappings":"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","names":["chalk","Command","ora","chalk","logger","msg","spinner","ora","example","Command","name","runExample","pull","projectId","runPull","push","runPush","logger","chalk","res","Command","chalk","version","commands","example","pull","push","banner","chalk","main","program","Command","version","command"]}